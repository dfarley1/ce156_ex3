UDP Client/Server to download files from multiple sources concurrently.
Daniel Farley

See doc/ex3_0.pdf for assignment requirements. 

----------
Files:
Makefile - Primary makefile, compile with "make" (provided)
bin/
    Makefile - Assembles executables from object files in /obj (provided)
    myserver - Server executable.
    myclient - Client executable.
doc/
    README - This file
obj/
    Makefile - Creates objects from source code in /src (Provided)
    myclient.d - Dependency files
    myserver.d - 
    myunp.d - 
    myclient.o - Compiled objects
    myserver.o - 
    myunp.o - 
src/
    globals.h - Global constants and structures
    myclient.c - Client code
    myserver.c - Server code
    myunp.h - Header for UNP wrapper (provided)
    myunp.c - UNP wrapper and error handling (Provided)
    
    

----------
Usage:
    Client: myclient <server-info.text> <num connections>
    Server: myserver <port num>


----------
Specification:
Packets are transmitted between server and client using a variable-length struct (packet_type).  This packet consists of:
    -opcode:    enumeration to specify what the packet is doing
        -error:         default, used to specify that some error has occured.  
                        Size is the length of the error string returned
                
        -size_request:  Used to request the filesize of a packet from a server
                        Size is the filesize requested in bytes
                        
        -size_reply:    Server's reply to a size_request
                        Size is the filesize requested in bytes
                        
        -chunk_request: Used to request part of the file from a server.
                        Start specifies where in the file to start grab from
                        Size specifies how many bytes to sends
                        
        -chunk_reply:   Server's reply with the requested data chunk.
                        Start specifies where in the file to the data was gotten
                        Size specifies how many bytes are being sent
                      
    -start:     integer used in chunk_request and chunk_reply to specify where in the file to start
    
    -size:      integer used in error, size_reply, chunk_request, and chunk_reply
                in an error, specifies how long the error string is
                is a size_reply, specifies the total length of the file
                in chunk_request, specifies how many bytes to sends
                in chunk_reply, specifies how many bytes are being sent
                
    -filename:  string used to store the name of the file being discussed
    
    -data:      Used as the first byte in a variable-length byte array to store data.  
                Length of the array is specified by size
           

The servers wait for an incoming packet and process it.  If it's a size_request, get the file's size (or an error) and reply to the client.  If it's a chunk_request, get the chunk of file (or an error) and reply to the client.  Otherwise, throw it away.

The client asks the user for a filename from stdin and then requests the size from the server.  After the server replies with a valid size, the client creates child threads which request chunks of the file in parallel from the servers specified in server-info.text.  

Each child is given an equal part of the file to transfer (file size / # of servers).  The child then requests that part of the file in a series of chunks, trying all servers multiple times if neccesary.  The children compile their chunks into the part of the file they were tasked with and hand them back to the parent.  The parent then compiles these parts into the final file and writes it to disk.

A very basic, single server example looks like this:
   opcode , size , start , filename , data
C: size_request, 0, 0, testfile, NULL
S: size_reply, 23, 0, testfile, NULL    OR    error, 14, 0, testfile, "file not found"
C-> CC1: 0-10
    CC2: 11-23

CC1: chunk_request, 10, 0, testfile, NULL               CC2: chunk_request, 13, 10, testfile, NULL
S: chunk_reply, 10, 0, testfile, <10 bytes of data>     S: chunk_reply, 13, 10, testfile, <13 bytes of data>


----------
Error checking is almost entirely handled by the client.  The only thing the server checks for is to make sure the file exists and that the request is within bounds of the file.  It will repeatedly ask the user for a filename until a successful request/reply has occured.  The client also checks each chunk received to ensure that the data replied with has the same start and size as requested.  


----------
Bugs & notes:
* Client does not ask user for a file name to save, it simply appends "_d" to the requested file name and overwrites any existing file with the same name
* The server-info.txt file must have a trailing newline at the end of the list of IPs otherwise the last port number will be truncated
* Unspecified behavior if a server goes down mid-transmission.  I believe the client will simply dump NULLs into the missing part of the file
